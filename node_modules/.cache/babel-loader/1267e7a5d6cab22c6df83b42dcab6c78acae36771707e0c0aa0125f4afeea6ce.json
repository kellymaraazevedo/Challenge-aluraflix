{"ast":null,"code":"var _jsxFileName = \"/home/kelly/Challenge-aluraflix/src/components/VideoForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// function VideoForm({ onSubmit, videoToEdit }) {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   useEffect(() => {\n//     if (videoToEdit) {\n//       setTitle(videoToEdit.title);\n//       setDescription(videoToEdit.description);\n//     } else {\n//       setTitle('');\n//       setDescription('');\n//     }\n//   }, [videoToEdit]);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     onSubmit({ title, description });\n//     setTitle('');\n//     setDescription('');\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <h2>{videoToEdit ? 'Editar Vídeo' : 'Adicionar Vídeo'}</h2>\n\n//       <input\n//         type=\"text\"\n//         value={title}\n//         onChange={(e) => setTitle(e.target.value)}\n//         placeholder=\"Título do vídeo\"\n//       />\n\n//       <textarea\n//         value={description}\n//         onChange={(e) => setDescription(e.target.value)}\n//         placeholder=\"Descrição do vídeo\"\n//       />\n\n//       <button type=\"submit\">{videoToEdit ? 'Atualizar' : 'Adicionar'}</button>\n//     </form>\n//   );\n// }\n\n// export default VideoForm;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoForm({\n  onSubmit,\n  videoToEdit\n}) {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n\n  // Quando o vídeo a ser editado mudar, ele atualiza o estado com os dados do vídeo\n  useEffect(() => {\n    if (videoToEdit) {\n      setTitle(videoToEdit.title); // Preenche o título do vídeo no formulário\n      setDescription(videoToEdit.description); // Preenche a descrição do vídeo\n    } else {\n      setTitle(''); // Limpa os campos quando não há vídeo para editar\n      setDescription('');\n    }\n  }, [videoToEdit]); // Quando videoToEdit mudar, o formulário é preenchido com os dados\n\n  // Função que é chamada ao submeter o formulário\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Se há um vídeo sendo editado, passa o id e os dados atualizados\n    if (videoToEdit) {\n      onSubmit({\n        id: videoToEdit.id,\n        title,\n        description\n      });\n    } else {\n      onSubmit({\n        title,\n        description\n      }); // Caso contrário, chama a função de adicionar\n    }\n\n    // Limpa os campos após o envio\n    setTitle('');\n    setDescription('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: videoToEdit ? 'Editar Vídeo' : 'Adicionar Vídeo'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      placeholder: \"T\\xEDtulo do v\\xEDdeo\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: description,\n      onChange: e => setDescription(e.target.value),\n      placeholder: \"Descri\\xE7\\xE3o do v\\xEDdeo\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: videoToEdit ? 'Atualizar' : 'Adicionar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoForm, \"IbsZ/fxR6UG1ESsIpEaeaQ87Gic=\");\n_c = VideoForm;\nexport default VideoForm;\nvar _c;\n$RefreshReg$(_c, \"VideoForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","VideoForm","onSubmit","videoToEdit","_s","title","setTitle","description","setDescription","handleSubmit","e","preventDefault","id","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["/home/kelly/Challenge-aluraflix/src/components/VideoForm.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// function VideoForm({ onSubmit, videoToEdit }) {\n//   const [title, setTitle] = useState('');\n//   const [description, setDescription] = useState('');\n\n//   useEffect(() => {\n//     if (videoToEdit) {\n//       setTitle(videoToEdit.title);\n//       setDescription(videoToEdit.description);\n//     } else {\n//       setTitle('');\n//       setDescription('');\n//     }\n//   }, [videoToEdit]);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     onSubmit({ title, description });\n//     setTitle('');\n//     setDescription('');\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <h2>{videoToEdit ? 'Editar Vídeo' : 'Adicionar Vídeo'}</h2>\n      \n//       <input\n//         type=\"text\"\n//         value={title}\n//         onChange={(e) => setTitle(e.target.value)}\n//         placeholder=\"Título do vídeo\"\n//       />\n      \n//       <textarea\n//         value={description}\n//         onChange={(e) => setDescription(e.target.value)}\n//         placeholder=\"Descrição do vídeo\"\n//       />\n\n//       <button type=\"submit\">{videoToEdit ? 'Atualizar' : 'Adicionar'}</button>\n//     </form>\n//   );\n// }\n\n// export default VideoForm;\n\n\nimport React, { useState, useEffect } from 'react';\n\nfunction VideoForm({ onSubmit, videoToEdit }) {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n\n  // Quando o vídeo a ser editado mudar, ele atualiza o estado com os dados do vídeo\n  useEffect(() => {\n    if (videoToEdit) {\n      setTitle(videoToEdit.title);  // Preenche o título do vídeo no formulário\n      setDescription(videoToEdit.description);  // Preenche a descrição do vídeo\n    } else {\n      setTitle('');  // Limpa os campos quando não há vídeo para editar\n      setDescription('');\n    }\n  }, [videoToEdit]); // Quando videoToEdit mudar, o formulário é preenchido com os dados\n\n  // Função que é chamada ao submeter o formulário\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Se há um vídeo sendo editado, passa o id e os dados atualizados\n    if (videoToEdit) {\n      onSubmit({ id: videoToEdit.id, title, description });\n    } else {\n      onSubmit({ title, description });  // Caso contrário, chama a função de adicionar\n    }\n\n    // Limpa os campos após o envio\n    setTitle('');\n    setDescription('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>{videoToEdit ? 'Editar Vídeo' : 'Adicionar Vídeo'}</h2>\n\n      <input\n        type=\"text\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        placeholder=\"Título do vídeo\"\n        required\n      />\n      \n      <textarea\n        value={description}\n        onChange={(e) => setDescription(e.target.value)}\n        placeholder=\"Descrição do vídeo\"\n        required\n      />\n      \n      <button type=\"submit\">{videoToEdit ? 'Atualizar' : 'Adicionar'}</button>\n    </form>\n  );\n}\n\nexport default VideoForm;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,SAASA,CAAC;EAAEC,QAAQ;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIK,WAAW,EAAE;MACfG,QAAQ,CAACH,WAAW,CAACE,KAAK,CAAC,CAAC,CAAE;MAC9BG,cAAc,CAACL,WAAW,CAACI,WAAW,CAAC,CAAC,CAAE;IAC5C,CAAC,MAAM;MACLD,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;MACfE,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC,EAAE,CAACL,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnB;EACA,MAAMM,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,IAAIR,WAAW,EAAE;MACfD,QAAQ,CAAC;QAAEU,EAAE,EAAET,WAAW,CAACS,EAAE;QAAEP,KAAK;QAAEE;MAAY,CAAC,CAAC;IACtD,CAAC,MAAM;MACLL,QAAQ,CAAC;QAAEG,KAAK;QAAEE;MAAY,CAAC,CAAC,CAAC,CAAE;IACrC;;IAEA;IACAD,QAAQ,CAAC,EAAE,CAAC;IACZE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,oBACER,OAAA;IAAME,QAAQ,EAAEO,YAAa;IAAAI,QAAA,gBAC3Bb,OAAA;MAAAa,QAAA,EAAKV,WAAW,GAAG,cAAc,GAAG;IAAiB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAE3DjB,OAAA;MACEkB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEd,KAAM;MACbe,QAAQ,EAAGV,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACW,MAAM,CAACF,KAAK,CAAE;MAC1CG,WAAW,EAAC,uBAAiB;MAC7BC,QAAQ;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eAEFjB,OAAA;MACEmB,KAAK,EAAEZ,WAAY;MACnBa,QAAQ,EAAGV,CAAC,IAAKF,cAAc,CAACE,CAAC,CAACW,MAAM,CAACF,KAAK,CAAE;MAChDG,WAAW,EAAC,6BAAoB;MAChCC,QAAQ;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eAEFjB,OAAA;MAAQkB,IAAI,EAAC,QAAQ;MAAAL,QAAA,EAAEV,WAAW,GAAG,WAAW,GAAG;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEX;AAACb,EAAA,CArDQH,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAuDlB,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}